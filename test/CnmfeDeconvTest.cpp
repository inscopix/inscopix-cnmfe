#include "isxCnmfeDeconv.h"
#include "isxTest.h"
#include "catch.hpp"

TEST_CASE("CnmfeDeconvEstimateTimeConst", "[cnmfe-deconv]")
{
    const isx::ColumnFloat_t inTrace = {
        15.9087785f, 39.093574f, 37.0103463f, 63.2176322f, 25.0918832f,
        52.0427554f, 52.2357718f, 68.6220029f, 48.9686648f, 29.5139094f
    };

    const float inNoise = 5.0f;
    const uint32_t lags = 5;
    const float inFudgeFactor = 1.0f;

    std::vector<float> outARParams;

    SECTION("Second Order AR")
    {
        const float inFirstOrderAR = false;

        isx::estimateTimeConst(inTrace, inNoise, lags, inFudgeFactor, inFirstOrderAR, outARParams);

        const std::vector<float> expArParams = {0.235851f, -0.0128607f};

        REQUIRE(approxEqual(outARParams[0], expArParams[0], 1e-5));
        REQUIRE(approxEqual(outARParams[1], expArParams[1], 1e-5));
    }

    SECTION("First Order AR")
    {
        const float inFirstOrderAR = true;

        isx::estimateTimeConst(inTrace, inNoise, lags, inFudgeFactor, inFirstOrderAR, outARParams);

        const std::vector<float> expArParams = {0.150264f};

        REQUIRE(approxEqual(outARParams[0], expArParams[0], 1e-5));
    }
}

TEST_CASE("CnmfeDeconvolveTraces", "[cnmfe-deconv]")
{
    SECTION("OASIS AR(1)")
    {
        isx::MatrixFloat_t inRawTraces = {
            {0.07478289f,-0.7791851f,0.1393962f,0.3316826f,-0.6914189f,0.483937f,1.195298f,-1.5717f,-0.9961514f,0.1351041f,-0.5757684f,-0.3080551f,-0.1212401f,0.08207657f,0.4579844f,0.6541771f,-0.3297681f,0.4573881f,1.157255f,0.6247014f,1.35573f,-0.5081656f,0.7793007f,0.1636641f,-1.088043f,10.1947f,10.17875f,3.789441f,1.967447f,1.170946f,0.3811955f,0.5595458f,0.2533118f,-0.1828294f,0.596527f,-0.7994132f,0.024035f,0.3090469f,-0.04174051f,0.1551008f,0.2264263f,0.8238515f,-0.4166898f,0.3338271f,-0.2374361f,0.03006838f,0.3240554f,0.08274345f,0.9824636f,0.3966784f,0.2343384f,-0.5320179f,1.41489f,1.234087f,-0.2629832f,0.9298532f,0.8690571f,-0.2956495f,-1.000746f,0.1358025f,0.2571005f,-0.07028896f,-1.069929f,-0.6999618f,0.815239f,-0.3935334f,-0.2704821f,-0.8786632f,0.5195333f,-0.1621386f,-0.5365084f,-0.3349264f,-0.05619196f,0.6302f,-0.5009497f,0.3535575f,0.2010511f,0.8601235f,0.04998723f,0.2093607f,1.011346f,1.258772f,-0.4354081f,0.1904049f,-1.733586f,-0.3262691f,0.6759961f,0.6170996f,-0.1526945f,0.02787536f,0.1319825f,-0.5923464f,-0.4389878f,0.3773217f,1.10336f,1.262165f,-0.4793987f,0.4273514f,0.8544518f,-0.3837523f},
            {-2.094119f,-0.06102079f,-0.6809784f,0.1388957f,-0.5736937f,0.2942127f,1.032724f,-0.8186219f,-0.9624371f,0.6675037f,3.151958f,1.328961f,0.6869836f,1.321416f,0.8552511f,1.33505f,0.2950159f,-0.801118f,-0.09008564f,0.2531507f,1.146807f,-0.3572169f,0.6562678f,-1.60283f,-0.7435564f,-1.174087f,-1.168944f,0.07061835f,0.3178843f,0.9168729f,-0.1372743f,-1.032897f,-0.4338986f,0.07405937f,-1.536913f,-0.807092f,-2.258055f,-0.7645427f,0.3255893f,-0.5630808f,-0.2178666f,-0.1952696f,-0.8130881f,0.3136506f,1.223104f,0.8272813f,0.9474457f,0.9097399f,0.3108072f,0.3650879f,-0.5781635f,-0.2061586f,-0.5938972f,0.2312865f,-0.2947934f,-1.172026f,5.590207f,16.1488f,8.564711f,3.45476f,0.6228447f,0.3764669f,1.074352f,-0.08544146f,-1.421218f,-0.0889716f,-1.202991f,-0.8171952f,-0.3709375f,-1.691642f,-1.38847f,-1.864075f,0.3591803f,-0.3082548f,0.2322693f,-0.7977256f,-0.816964f,-1.480299f,-0.05150932f,1.042518f,0.2701001f,-1.225958f,0.2311528f,1.441223f,0.2443455f,-0.3666948f,0.3739933f,-0.01053589f,-1.187304f,1.276093f,0.2947797f,-1.645337f,-0.1221999f,0.3397105f,-1.362134f,-1.44408f,0.005181274f,0.9721444f,1.757944f,0.4924583f}
        };

        const isx::MatrixFloat_t expectedDeconvolvedTraces = {
			{0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,6.07333900f,3.57635900f,2.10598200f,1.24013300f,0.73026750f,0.43002690f,0.25322650f,0.14911550f,0.08780848f,0.05170709f,0.03044835f,0.01792988f,0.01055823f,0.00621734f,0.00366116f,0.00215592f,0.00126954f,0.00074758f,0.00044022f,0.00025923f,0.00015265f,0.00008990f,0.00005290f,0.00003120f,0.00001840f,0.00001080f,0.00000636f,0.00000375f,0.00000221f,0.00000130f,0.00000076f,0.00000045f,0.00000027f,0.00000016f,0.00000009f,0.00000005f,0.00000003f,0.00000002f,0.00000001f,0.00000001f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000},
			{0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.83795020f,0.47933810f,0.27419890f,0.15685180f,0.08972498f,0.05132597f,0.02936033f,0.01679518f,0.00960746f,0.00549582f,0.00314381f,0.00179837f,0.00102874f,0.00058847f,0.00033663f,0.00019256f,0.00011015f,0.00006300f,0.00003600f,0.00002060f,0.00001180f,0.00000675f,0.00000386f,0.00000221f,0.00000126f,0.00000072f,0.00000041f,0.00000024f,0.00000014f,0.00000008f,0.00000004f,0.00000003f,0.00000001f,0.00000001f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,0.00000000f,4.17382700f,12.81209000f,7.32898600f,4.19244800f,2.39823300f,1.37187700f,0.78476390f,0.44891370f,0.25679500f,0.14689610f,0.08402997f,0.04806821f,0.02749677f,0.01572916f,0.00899766f,0.00514699f,0.00294427f,0.00168423f,0.00096344f,0.00055112f,0.00031526f,0.00018034f,0.00010316f,0.00005900f,0.00003380f,0.00001930f,0.00001100f,0.00000632f,0.00000361f,0.00000207f,0.00000118f,0.00000068f,0.00000039f,0.00000022f,0.00000013f,0.00000007f,0.00000004f,0.00000002f,0.00000001f,0.00000001f,0.00000000f,0.00000000f,0.00000000f,0.00000000f}
        };
        isx::MatrixFloat_t expectedS = {
            {0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,6.073339f,0.0f,-0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.0f,0.0f,0.0f,0.0f,0.0f,-0.0f,0.0f,-0.0f,0.0f,-0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.0f,0.0f,0.0f,-0.0f,0.0f,0.0f,0.0f,-0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.0f,0.0f,0.0f,0.0f,0.0f,0.0f},
            {0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.837953f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,4.173829f,10.424509f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.0f,0.0f,0.0f,0.0f,-0.0f,0.0f,-0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,-0.0f,-0.0f,0.0f,0.0f,-0.0f,0.0f,0.0f,0.0f,-0.0f,0.0f,0.0f,-0.0f,0.0f}
        };
        isx::ColumnFloat_t expectedSn = {1.0f, 1.0f};

        isx::DeconvolutionParams inDeconvParams;
        isx::MatrixFloat_t outDeconvolvedTraces;
        isx::MatrixFloat_t outS;
        isx::ColumnFloat_t outSn;
        const size_t inNumIterations = 1;
        isx::deconvolveTraces(inRawTraces, outDeconvolvedTraces, outS, outSn, inDeconvParams, inNumIterations);

        for (size_t i = 0; i < inRawTraces.n_rows; i++)
        {
            REQUIRE(approxEqual(arma::norm_dot(outDeconvolvedTraces.row(i), expectedDeconvolvedTraces.row(i)), 1., 1e-5));
            REQUIRE(approxEqual(arma::norm_dot(outS.row(i), expectedS.row(i)), 1., 1e-5));
        }
        REQUIRE(arma::approx_equal(outSn, expectedSn, "rel_tol", 1e-5));
    }
}
